package com.xb.busmore.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xb.busmore.moudle.qrCode.entity.FTPEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FTPENTITY".
*/
public class FTPEntityDao extends AbstractDao<FTPEntity, Long> {

    public static final String TABLENAME = "FTPENTITY";

    /**
     * Properties of entity FTPEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property I = new Property(1, String.class, "i", false, "I");
        public final static Property P = new Property(2, int.class, "p", false, "P");
        public final static Property U = new Property(3, String.class, "u", false, "U");
        public final static Property Psw = new Property(4, String.class, "psw", false, "PSW");
        public final static Property K = new Property(5, String.class, "k", false, "K");
    }


    public FTPEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FTPEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FTPENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"I\" TEXT," + // 1: i
                "\"P\" INTEGER NOT NULL ," + // 2: p
                "\"U\" TEXT," + // 3: u
                "\"PSW\" TEXT," + // 4: psw
                "\"K\" TEXT);"); // 5: k
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FTPENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FTPEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String i = entity.getI();
        if (i != null) {
            stmt.bindString(2, i);
        }
        stmt.bindLong(3, entity.getP());
 
        String u = entity.getU();
        if (u != null) {
            stmt.bindString(4, u);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
 
        String k = entity.getK();
        if (k != null) {
            stmt.bindString(6, k);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FTPEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String i = entity.getI();
        if (i != null) {
            stmt.bindString(2, i);
        }
        stmt.bindLong(3, entity.getP());
 
        String u = entity.getU();
        if (u != null) {
            stmt.bindString(4, u);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
 
        String k = entity.getK();
        if (k != null) {
            stmt.bindString(6, k);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FTPEntity readEntity(Cursor cursor, int offset) {
        FTPEntity entity = new FTPEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // i
            cursor.getInt(offset + 2), // p
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // u
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // psw
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // k
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FTPEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setI(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setP(cursor.getInt(offset + 2));
        entity.setU(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPsw(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setK(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FTPEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FTPEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FTPEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
