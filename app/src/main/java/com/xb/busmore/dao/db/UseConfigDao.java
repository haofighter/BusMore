package com.xb.busmore.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xb.busmore.entity.car.UseConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USE_CONFIG".
*/
public class UseConfigDao extends AbstractDao<UseConfig, Long> {

    public static final String TABLENAME = "USE_CONFIG";

    /**
     * Properties of entity UseConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Station = new Property(1, int.class, "station", false, "STATION");
        public final static Property Line_chinese_name = new Property(2, String.class, "line_chinese_name", false, "LINE_CHINESE_NAME");
        public final static Property Line = new Property(3, String.class, "line", false, "LINE");
        public final static Property DriverNo = new Property(4, String.class, "driverNo", false, "DRIVER_NO");
        public final static Property WxTx_Id = new Property(5, int.class, "WxTx_Id", false, "WX_TX__ID");
    }


    public UseConfigDao(DaoConfig config) {
        super(config);
    }
    
    public UseConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USE_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATION\" INTEGER NOT NULL ," + // 1: station
                "\"LINE_CHINESE_NAME\" TEXT," + // 2: line_chinese_name
                "\"LINE\" TEXT," + // 3: line
                "\"DRIVER_NO\" TEXT," + // 4: driverNo
                "\"WX_TX__ID\" INTEGER NOT NULL );"); // 5: WxTx_Id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USE_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UseConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStation());
 
        String line_chinese_name = entity.getLine_chinese_name();
        if (line_chinese_name != null) {
            stmt.bindString(3, line_chinese_name);
        }
 
        String line = entity.getLine();
        if (line != null) {
            stmt.bindString(4, line);
        }
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(5, driverNo);
        }
        stmt.bindLong(6, entity.getWxTx_Id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UseConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStation());
 
        String line_chinese_name = entity.getLine_chinese_name();
        if (line_chinese_name != null) {
            stmt.bindString(3, line_chinese_name);
        }
 
        String line = entity.getLine();
        if (line != null) {
            stmt.bindString(4, line);
        }
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(5, driverNo);
        }
        stmt.bindLong(6, entity.getWxTx_Id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UseConfig readEntity(Cursor cursor, int offset) {
        UseConfig entity = new UseConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // station
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // line_chinese_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // line
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // driverNo
            cursor.getInt(offset + 5) // WxTx_Id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UseConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStation(cursor.getInt(offset + 1));
        entity.setLine_chinese_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLine(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDriverNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWxTx_Id(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UseConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UseConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UseConfig entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
