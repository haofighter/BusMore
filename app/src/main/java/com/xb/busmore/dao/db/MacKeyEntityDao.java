package com.xb.busmore.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xb.busmore.moudle.qrCode.entity.MacKeyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAC_KEY_ENTITY".
*/
public class MacKeyEntityDao extends AbstractDao<MacKeyEntity, Long> {

    public static final String TABLENAME = "MAC_KEY_ENTITY";

    /**
     * Properties of entity MacKeyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key_id = new Property(1, String.class, "key_id", false, "KEY_ID");
        public final static Property Pubkey = new Property(2, String.class, "pubkey", false, "PUBKEY");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
    }


    public MacKeyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MacKeyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAC_KEY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY_ID\" TEXT UNIQUE ," + // 1: key_id
                "\"PUBKEY\" TEXT UNIQUE ," + // 2: pubkey
                "\"TIME\" TEXT);"); // 3: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAC_KEY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MacKeyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key_id = entity.getKey_id();
        if (key_id != null) {
            stmt.bindString(2, key_id);
        }
 
        String pubkey = entity.getPubkey();
        if (pubkey != null) {
            stmt.bindString(3, pubkey);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MacKeyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key_id = entity.getKey_id();
        if (key_id != null) {
            stmt.bindString(2, key_id);
        }
 
        String pubkey = entity.getPubkey();
        if (pubkey != null) {
            stmt.bindString(3, pubkey);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MacKeyEntity readEntity(Cursor cursor, int offset) {
        MacKeyEntity entity = new MacKeyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubkey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MacKeyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPubkey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MacKeyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MacKeyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MacKeyEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
