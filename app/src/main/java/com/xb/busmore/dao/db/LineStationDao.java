package com.xb.busmore.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xb.busmore.entity.LineStation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINE_STATION".
*/
public class LineStationDao extends AbstractDao<LineStation, Long> {

    public static final String TABLENAME = "LINE_STATION";

    /**
     * Properties of entity LineStation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property No = new Property(1, int.class, "no", false, "NO");
        public final static Property Line = new Property(2, String.class, "line", false, "LINE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Latitude = new Property(4, float.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, float.class, "longitude", false, "LONGITUDE");
        public final static Property Distance = new Property(6, double.class, "distance", false, "DISTANCE");
        public final static Property Time = new Property(7, Long.class, "time", false, "TIME");
        public final static Property Diraction = new Property(8, int.class, "diraction", false, "DIRACTION");
    }


    public LineStationDao(DaoConfig config) {
        super(config);
    }
    
    public LineStationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINE_STATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NO\" INTEGER NOT NULL ," + // 1: no
                "\"LINE\" TEXT," + // 2: line
                "\"NAME\" TEXT," + // 3: name
                "\"LATITUDE\" REAL NOT NULL ," + // 4: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 5: longitude
                "\"DISTANCE\" REAL NOT NULL ," + // 6: distance
                "\"TIME\" INTEGER," + // 7: time
                "\"DIRACTION\" INTEGER NOT NULL );"); // 8: diraction
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINE_STATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LineStation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNo());
 
        String line = entity.getLine();
        if (line != null) {
            stmt.bindString(3, line);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
        stmt.bindDouble(7, entity.getDistance());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time);
        }
        stmt.bindLong(9, entity.getDiraction());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LineStation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNo());
 
        String line = entity.getLine();
        if (line != null) {
            stmt.bindString(3, line);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
        stmt.bindDouble(7, entity.getDistance());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time);
        }
        stmt.bindLong(9, entity.getDiraction());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LineStation readEntity(Cursor cursor, int offset) {
        LineStation entity = new LineStation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // line
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getFloat(offset + 4), // latitude
            cursor.getFloat(offset + 5), // longitude
            cursor.getDouble(offset + 6), // distance
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // time
            cursor.getInt(offset + 8) // diraction
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LineStation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNo(cursor.getInt(offset + 1));
        entity.setLine(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.getFloat(offset + 4));
        entity.setLongitude(cursor.getFloat(offset + 5));
        entity.setDistance(cursor.getDouble(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDiraction(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LineStation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LineStation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LineStation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
